name: ie-bank-backend

on:
  push:
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  BACKEND_WEBAPP_DEV: lemonke-be-dev
  BACKEND_WEBAPP_UAT: lemonke-be-uat
  BACKEND_WEBAPP_PROD: lemonke-be-prod
  IMAGE_NAME: backend
  KEY_VAULT_SECRET_NAME_ACR_USERNAME: "acr-username"
  KEY_VAULT_SECRET_NAME_ACR_PASSWORD: "acr-password1"
  KEY_VAULT_NAME: lemonke-kv
  DOCKER_REGISTRY_SERVER_URL: lemonkecr.azurecr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Github Action"
        uses: actions/checkout@v3

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get docker registry credentials from Azure Key Vault"
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV

      - name: "Login to Docker Registry"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "::set-output name=version::$(date +'%Y.%m.%d.%H.%M')"

      # Step 2: Run tests
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      # Add steps to install dependencies, setup environment, and run tests here...
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests
        run: python -m pytest tests/unit -v

      - name: Run functional tests
        run: python -m pytest tests/functional -v

      - name: Generate coverage report
        run: python -m pytest --cov=iebank_api --cov-report=xml:coverage.xml

      # Build and Push image
      - name: "Build and push image"
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker tag ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }} ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest

      - name: "Deploy to Azure Web App - Dev"
        if: github.ref == 'refs/heads/dev'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: "${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest"

      - name: "Deploy to Azure Web App - UAT"
        if: github.ref == 'refs/heads/uat'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: "${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest"

      # POSTMAN tests after UAT, before PROD
      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Tests
        run: newman run ./DevOpsBanking.postman_collection.json -e ./DevOpsEnv.postman_environment.json

      - name: "Deploy to Azure Web App - Prod"
        if: github.ref == 'refs/heads/main'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_WEBAPP_PROD }}
          images: "${{ env.DOCKER_REGISTRY_SERVER_URL }}/${{ env.IMAGE_NAME }}:latest"
