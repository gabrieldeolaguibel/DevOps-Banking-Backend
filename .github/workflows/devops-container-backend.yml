name: deploy-app-container

on:
    push:
    pull_request:
      branches: ["main"]
    workflow_dispatch:

env:
  REGISTRY_LOGIN_SERVER: lemonkecr
  KEY_VAULT_NAME: lemonke-kv
  KEY_VAULT_SECRET_NAME_ACR_USERNAME: 'acr-username'
  KEY_VAULT_SECRET_NAME_ACR_PASSWORD: 'acr-password1'
  IMAGE_NAME: backend
  AZURE_WEBAPP_NAME: lemonke-be
  DBUSER: 'maudandjannik'
  DBHOST: 'lemonke-dbsrv'
  DBURL: 'postgres.database.azure.com'
  DBNAME: 'lemonke-db'
  DBPASS: 'mj1234'


jobs:
  build:
      runs-on: ubuntu-latest
      steps:
      # checkout the repo
      - name: 'Checkout Github Action'
        uses: actions/checkout@v3

      - name: 'Set ENV based on event'
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "ENV=prod" >> $GITHUB_ENV
            else
              echo "ENV=dev" >> $GITHUB_ENV
            fi
          fi

      - name: 'Set db values'
        run: |
          echo "DBHOST=${{ env.DBHOST }}-${{ env.ENV }}.${{ env.DBURL }}" >> $GITHUB_ENV
          echo "DBNAME=${{ env.DBNAME }}-${{ env.ENV }}" >> $GITHUB_ENV

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get docker registry credentials from key vault'
        if: env.ENV == 'dev' || env.ENV == 'uat'
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME }}-${{ env.ENV }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME }}-${{ env.ENV }} --query value -o tsv)" >> $GITHUB_ENV

      - name: 'Get docker registry credentials from key vault'
        if: env.ENV == 'prod'
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME }}-production --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME }}-production --query value -o tsv)" >> $GITHUB_ENV

      - uses: azure/docker-login@v1
        if: env.ENV != 'prod'
        with:
          login-server: ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - uses: azure/docker-login@v1
        if: env.ENV == 'prod'
        with:
          login-server: ${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "::set-output name=version::$(echo ${GITHUB_REF_NAME})-$(date +'%Y.%m.%d.%H.%M')"

      - name: 'Build and push Docker image'
        if: env.ENV == 'dev' || env.ENV == 'prod'
        run: |
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{env.IMAGE_NAME}}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{env.IMAGE_NAME}}:${{ github.ref_name }}-latest

      - name: 'Build and push Docker image'
        if: env.ENV == 'uat' || env.ENV == 'prod'
        run: |
          export "DATE=$(date +'%Y.%m.%d.%H.%M')"
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{ env.IMAGE_NAME }}:uat-latest
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}${{ env.ENV }}.azurecr.io/${{env.IMAGE_NAME}}:uat-latest

      - name: 'Build and push Docker image'
        if: env.ENV == 'prod'
        run: |
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io/${{env.IMAGE_NAME}}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io/${{env.IMAGE_NAME}}:${{ github.ref_name }}-latest

  deploy-dev:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}-dev
          images: '${{ env.REGISTRY_LOGIN_SERVER }}dev.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest'
  
  deploy-uat:
    if: github.event.pull_request.base.ref == 'main' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}-uat
          images: '${{ env.REGISTRY_LOGIN_SERVER }}uat.azurecr.io/${{ env.IMAGE_NAME }}:uat-latest'
  
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}-prod
          images: '${{ env.REGISTRY_LOGIN_SERVER }}prod.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest'